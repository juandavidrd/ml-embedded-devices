// -------------------------------------------------------------
// 
// File Name: C:\Users\juand\Documents\MATLAB\Resultados\modelo_base\modelo_base_hdl\modelo_base\hdlsrc\modelo_base_fixpt_tb.v
// Created: 2022-12-10 19:54:30
// 
// Generated by MATLAB 9.13, MATLAB Coder 5.5 and HDL Coder 4.0
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: modelo_base_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module modelo_base_fixpt_tb;



  reg  clk;
  reg  reset;
  wire enb;
  wire out_done;  // ufix1
  wire rdEnb;
  wire out_done_enb;  // ufix1
  reg [7:0] out_addr;  // ufix8
  wire out_active;  // ufix1
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire out_enb;  // ufix1
  wire out_lastAddr;  // ufix1
  reg [7:0] in_addr;  // ufix8
  wire in_active;  // ufix1
  wire in_enb;  // ufix1
  wire [7:0] in_addr_delay_1;  // ufix8
  reg signed [31:0] fp_in_0;  // sfix32
  reg [15:0] rawData_in_0;  // ufix16_En15
  reg signed [31:0] status_in_0;  // sfix32
  reg [15:0] holdData_in_0;  // ufix16_En15
  reg signed [31:0] fp_in_1;  // sfix32
  reg [15:0] rawData_in_1;  // ufix16_En15
  reg signed [31:0] status_in_1;  // sfix32
  reg [15:0] holdData_in_1;  // ufix16_En15
  reg signed [31:0] fp_in_2;  // sfix32
  reg [15:0] rawData_in_2;  // ufix16_En15
  reg signed [31:0] status_in_2;  // sfix32
  reg [15:0] holdData_in_2;  // ufix16_En15
  reg signed [31:0] fp_in_3;  // sfix32
  reg [15:0] rawData_in_3;  // ufix16_En15
  reg signed [31:0] status_in_3;  // sfix32
  reg [15:0] holdData_in_3;  // ufix16_En15
  reg signed [31:0] fp_in_4;  // sfix32
  reg [15:0] rawData_in_4;  // ufix16_En15
  reg signed [31:0] status_in_4;  // sfix32
  reg [15:0] holdData_in_4;  // ufix16_En15
  reg signed [31:0] fp_in_5;  // sfix32
  reg [15:0] rawData_in_5;  // ufix16_En15
  reg signed [31:0] status_in_5;  // sfix32
  reg [15:0] holdData_in_5;  // ufix16_En15
  reg signed [31:0] fp_in_6;  // sfix32
  reg [15:0] rawData_in_6;  // ufix16_En15
  reg signed [31:0] status_in_6;  // sfix32
  reg [15:0] holdData_in_6;  // ufix16_En15
  reg signed [31:0] fp_in_7;  // sfix32
  reg [15:0] rawData_in_7;  // ufix16_En15
  reg signed [31:0] status_in_7;  // sfix32
  reg [15:0] holdData_in_7;  // ufix16_En15
  reg signed [31:0] fp_in_8;  // sfix32
  reg [15:0] rawData_in_8;  // ufix16_En15
  reg signed [31:0] status_in_8;  // sfix32
  reg [15:0] holdData_in_8;  // ufix16_En15
  reg signed [31:0] fp_in_9;  // sfix32
  reg [15:0] rawData_in_9;  // ufix16_En15
  reg signed [31:0] status_in_9;  // sfix32
  reg [15:0] holdData_in_9;  // ufix16_En15
  reg signed [31:0] fp_in_10;  // sfix32
  reg [15:0] rawData_in_10;  // ufix16_En15
  reg signed [31:0] status_in_10;  // sfix32
  reg [15:0] holdData_in_10;  // ufix16_En15
  reg signed [31:0] fp_in_11;  // sfix32
  reg [15:0] rawData_in_11;  // ufix16_En15
  reg signed [31:0] status_in_11;  // sfix32
  reg [15:0] holdData_in_11;  // ufix16_En15
  reg signed [31:0] fp_in_12;  // sfix32
  reg [15:0] rawData_in_12;  // ufix16_En15
  reg signed [31:0] status_in_12;  // sfix32
  reg [15:0] holdData_in_12;  // ufix16_En15
  reg signed [31:0] fp_in_13;  // sfix32
  reg [15:0] rawData_in_13;  // ufix16_En15
  reg signed [31:0] status_in_13;  // sfix32
  reg [15:0] holdData_in_13;  // ufix16_En15
  reg signed [31:0] fp_in_14;  // sfix32
  reg [15:0] rawData_in_14;  // ufix16_En15
  reg signed [31:0] status_in_14;  // sfix32
  reg [15:0] holdData_in_14;  // ufix16_En15
  reg signed [31:0] fp_in_15;  // sfix32
  reg [15:0] rawData_in_15;  // ufix16_En15
  reg signed [31:0] status_in_15;  // sfix32
  reg [15:0] holdData_in_15;  // ufix16_En15
  reg signed [31:0] fp_in_16;  // sfix32
  reg [15:0] rawData_in_16;  // ufix16_En15
  reg signed [31:0] status_in_16;  // sfix32
  reg [15:0] holdData_in_16;  // ufix16_En15
  reg signed [31:0] fp_in_17;  // sfix32
  reg [15:0] rawData_in_17;  // ufix16_En15
  reg signed [31:0] status_in_17;  // sfix32
  reg [15:0] holdData_in_17;  // ufix16_En15
  reg signed [31:0] fp_in_18;  // sfix32
  reg [15:0] rawData_in_18;  // ufix16_En15
  reg signed [31:0] status_in_18;  // sfix32
  reg [15:0] holdData_in_18;  // ufix16_En15
  reg signed [31:0] fp_in_19;  // sfix32
  reg [15:0] rawData_in_19;  // ufix16_En15
  reg signed [31:0] status_in_19;  // sfix32
  reg [15:0] holdData_in_19;  // ufix16_En15
  reg signed [31:0] fp_in_20;  // sfix32
  reg [15:0] rawData_in_20;  // ufix16_En15
  reg signed [31:0] status_in_20;  // sfix32
  reg [15:0] holdData_in_20;  // ufix16_En15
  reg signed [31:0] fp_in_21;  // sfix32
  reg [15:0] rawData_in_21;  // ufix16_En15
  reg signed [31:0] status_in_21;  // sfix32
  reg [15:0] holdData_in_21;  // ufix16_En15
  reg signed [31:0] fp_in_22;  // sfix32
  reg [15:0] rawData_in_22;  // ufix16_En15
  reg signed [31:0] status_in_22;  // sfix32
  reg [15:0] holdData_in_22;  // ufix16_En15
  reg signed [31:0] fp_in_23;  // sfix32
  reg [15:0] rawData_in_23;  // ufix16_En15
  reg signed [31:0] status_in_23;  // sfix32
  reg [15:0] holdData_in_23;  // ufix16_En15
  reg signed [31:0] fp_in_24;  // sfix32
  reg [15:0] rawData_in_24;  // ufix16_En15
  reg signed [31:0] status_in_24;  // sfix32
  reg [15:0] holdData_in_24;  // ufix16_En15
  reg signed [31:0] fp_in_25;  // sfix32
  reg [15:0] rawData_in_25;  // ufix16_En15
  reg signed [31:0] status_in_25;  // sfix32
  reg [15:0] holdData_in_25;  // ufix16_En15
  reg signed [31:0] fp_in_26;  // sfix32
  reg [15:0] rawData_in_26;  // ufix16_En15
  reg signed [31:0] status_in_26;  // sfix32
  reg [15:0] holdData_in_26;  // ufix16_En15
  reg signed [31:0] fp_in_27;  // sfix32
  reg [15:0] rawData_in_27;  // ufix16_En15
  reg signed [31:0] status_in_27;  // sfix32
  reg [15:0] holdData_in_27;  // ufix16_En15
  reg signed [31:0] fp_in_28;  // sfix32
  reg [15:0] rawData_in_28;  // ufix16_En15
  reg signed [31:0] status_in_28;  // sfix32
  reg [15:0] holdData_in_28;  // ufix16_En15
  reg signed [31:0] fp_in_29;  // sfix32
  reg [15:0] rawData_in_29;  // ufix16_En15
  reg signed [31:0] status_in_29;  // sfix32
  reg [15:0] holdData_in_29;  // ufix16_En15
  reg [15:0] in_0_offset;  // ufix16_En15
  wire [15:0] in_0;  // ufix16_En15
  reg [15:0] in_1_offset;  // ufix16_En15
  wire [15:0] in_1;  // ufix16_En15
  reg [15:0] in_2_offset;  // ufix16_En15
  wire [15:0] in_2;  // ufix16_En15
  reg [15:0] in_3_offset;  // ufix16_En15
  wire [15:0] in_3;  // ufix16_En15
  reg [15:0] in_4_offset;  // ufix16_En15
  wire [15:0] in_4;  // ufix16_En15
  reg [15:0] in_5_offset;  // ufix16_En15
  wire [15:0] in_5;  // ufix16_En15
  reg [15:0] in_6_offset;  // ufix16_En15
  wire [15:0] in_6;  // ufix16_En15
  reg [15:0] in_7_offset;  // ufix16_En15
  wire [15:0] in_7;  // ufix16_En15
  reg [15:0] in_8_offset;  // ufix16_En15
  wire [15:0] in_8;  // ufix16_En15
  reg [15:0] in_9_offset;  // ufix16_En15
  wire [15:0] in_9;  // ufix16_En15
  reg [15:0] in_10_offset;  // ufix16_En15
  wire [15:0] in_10;  // ufix16_En15
  reg [15:0] in_11_offset;  // ufix16_En15
  wire [15:0] in_11;  // ufix16_En15
  reg [15:0] in_12_offset;  // ufix16_En15
  wire [15:0] in_12;  // ufix16_En15
  reg [15:0] in_13_offset;  // ufix16_En15
  wire [15:0] in_13;  // ufix16_En15
  reg [15:0] in_14_offset;  // ufix16_En15
  wire [15:0] in_14;  // ufix16_En15
  reg [15:0] in_15_offset;  // ufix16_En15
  wire [15:0] in_15;  // ufix16_En15
  reg [15:0] in_16_offset;  // ufix16_En15
  wire [15:0] in_16;  // ufix16_En15
  reg [15:0] in_17_offset;  // ufix16_En15
  wire [15:0] in_17;  // ufix16_En15
  reg [15:0] in_18_offset;  // ufix16_En15
  wire [15:0] in_18;  // ufix16_En15
  reg [15:0] in_19_offset;  // ufix16_En15
  wire [15:0] in_19;  // ufix16_En15
  reg [15:0] in_20_offset;  // ufix16_En15
  wire [15:0] in_20;  // ufix16_En15
  reg [15:0] in_21_offset;  // ufix16_En15
  wire [15:0] in_21;  // ufix16_En15
  reg [15:0] in_22_offset;  // ufix16_En15
  wire [15:0] in_22;  // ufix16_En15
  reg [15:0] in_23_offset;  // ufix16_En15
  wire [15:0] in_23;  // ufix16_En15
  reg [15:0] in_24_offset;  // ufix16_En15
  wire [15:0] in_24;  // ufix16_En15
  reg [15:0] in_25_offset;  // ufix16_En15
  wire [15:0] in_25;  // ufix16_En15
  reg [15:0] in_26_offset;  // ufix16_En15
  wire [15:0] in_26;  // ufix16_En15
  reg [15:0] in_27_offset;  // ufix16_En15
  wire [15:0] in_27;  // ufix16_En15
  reg [15:0] in_28_offset;  // ufix16_En15
  wire [15:0] in_28;  // ufix16_En15
  reg [15:0] in_29_offset;  // ufix16_En15
  wire [15:0] in_29;  // ufix16_En15
  wire out_1;  // ufix1
  wire [7:0] out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_out_expected;  // sfix32
  reg  out_expected;  // ufix1
  reg signed [31:0] status_out_expected;  // sfix32
  wire out_ref;  // ufix1
  reg  out_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign out_done_enb = out_done & rdEnb;



  assign out_active = out_addr != 8'b10001110;



  assign #2 enb = rdEnb;

  assign snkDonen =  ~ check1_done;



  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (check1_done == 1'b0 ? tb_enb :
              1'b0);



  assign ce_out = enb & (rdEnb & tb_enb);



  assign out_enb = ce_out & out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 142
  always @(posedge clk or posedge reset)
    begin : out_process
      if (reset == 1'b1) begin
        out_addr <= 8'b00000000;
      end
      else begin
        if (out_enb) begin
          if (out_addr >= 8'b10001110) begin
            out_addr <= 8'b00000000;
          end
          else begin
            out_addr <= out_addr + 8'b00000001;
          end
        end
      end
    end



  assign out_lastAddr = out_addr >= 8'b10001110;



  assign out_done = out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (out_done_enb) begin
          check1_done <= out_done;
        end
      end
    end

  assign in_active = in_addr != 8'b10001110;



  assign in_enb = in_active & (rdEnb & tb_enb);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 142
  always @(posedge clk or posedge reset)
    begin : in_process
      if (reset == 1'b1) begin
        in_addr <= 8'b00000000;
      end
      else begin
        if (in_enb) begin
          if (in_addr >= 8'b10001110) begin
            in_addr <= 8'b00000000;
          end
          else begin
            in_addr <= in_addr + 8'b00000001;
          end
        end
      end
    end



  assign #1 in_addr_delay_1 = in_addr;

  // Data source for in_0
  initial
    begin : in_0_fileread
      fp_in_0 = $fopen("in_0.dat", "r");
      status_in_0 = $rewind(fp_in_0);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_0 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_0 = $fscanf(fp_in_0, "%h", rawData_in_0);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in
      if (reset) begin
        holdData_in_0 <= 16'bx;
      end
      else begin
        holdData_in_0 <= rawData_in_0;
      end
    end

  // Data source for in_1
  initial
    begin : in_1_fileread
      fp_in_1 = $fopen("in_1.dat", "r");
      status_in_1 = $rewind(fp_in_1);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_1 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_1 = $fscanf(fp_in_1, "%h", rawData_in_1);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_1
      if (reset) begin
        holdData_in_1 <= 16'bx;
      end
      else begin
        holdData_in_1 <= rawData_in_1;
      end
    end

  // Data source for in_2
  initial
    begin : in_2_fileread
      fp_in_2 = $fopen("in_2.dat", "r");
      status_in_2 = $rewind(fp_in_2);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_2 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_2 = $fscanf(fp_in_2, "%h", rawData_in_2);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_2
      if (reset) begin
        holdData_in_2 <= 16'bx;
      end
      else begin
        holdData_in_2 <= rawData_in_2;
      end
    end

  // Data source for in_3
  initial
    begin : in_3_fileread
      fp_in_3 = $fopen("in_3.dat", "r");
      status_in_3 = $rewind(fp_in_3);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_3 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_3 = $fscanf(fp_in_3, "%h", rawData_in_3);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_3
      if (reset) begin
        holdData_in_3 <= 16'bx;
      end
      else begin
        holdData_in_3 <= rawData_in_3;
      end
    end

  // Data source for in_4
  initial
    begin : in_4_fileread
      fp_in_4 = $fopen("in_4.dat", "r");
      status_in_4 = $rewind(fp_in_4);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_4 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_4 = $fscanf(fp_in_4, "%h", rawData_in_4);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_4
      if (reset) begin
        holdData_in_4 <= 16'bx;
      end
      else begin
        holdData_in_4 <= rawData_in_4;
      end
    end

  // Data source for in_5
  initial
    begin : in_5_fileread
      fp_in_5 = $fopen("in_5.dat", "r");
      status_in_5 = $rewind(fp_in_5);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_5 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_5 = $fscanf(fp_in_5, "%h", rawData_in_5);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_5
      if (reset) begin
        holdData_in_5 <= 16'bx;
      end
      else begin
        holdData_in_5 <= rawData_in_5;
      end
    end

  // Data source for in_6
  initial
    begin : in_6_fileread
      fp_in_6 = $fopen("in_6.dat", "r");
      status_in_6 = $rewind(fp_in_6);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_6 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_6 = $fscanf(fp_in_6, "%h", rawData_in_6);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_6
      if (reset) begin
        holdData_in_6 <= 16'bx;
      end
      else begin
        holdData_in_6 <= rawData_in_6;
      end
    end

  // Data source for in_7
  initial
    begin : in_7_fileread
      fp_in_7 = $fopen("in_7.dat", "r");
      status_in_7 = $rewind(fp_in_7);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_7 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_7 = $fscanf(fp_in_7, "%h", rawData_in_7);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_7
      if (reset) begin
        holdData_in_7 <= 16'bx;
      end
      else begin
        holdData_in_7 <= rawData_in_7;
      end
    end

  // Data source for in_8
  initial
    begin : in_8_fileread
      fp_in_8 = $fopen("in_8.dat", "r");
      status_in_8 = $rewind(fp_in_8);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_8 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_8 = $fscanf(fp_in_8, "%h", rawData_in_8);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_8
      if (reset) begin
        holdData_in_8 <= 16'bx;
      end
      else begin
        holdData_in_8 <= rawData_in_8;
      end
    end

  // Data source for in_9
  initial
    begin : in_9_fileread
      fp_in_9 = $fopen("in_9.dat", "r");
      status_in_9 = $rewind(fp_in_9);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_9 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_9 = $fscanf(fp_in_9, "%h", rawData_in_9);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_9
      if (reset) begin
        holdData_in_9 <= 16'bx;
      end
      else begin
        holdData_in_9 <= rawData_in_9;
      end
    end

  // Data source for in_10
  initial
    begin : in_10_fileread
      fp_in_10 = $fopen("in_10.dat", "r");
      status_in_10 = $rewind(fp_in_10);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_10 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_10 = $fscanf(fp_in_10, "%h", rawData_in_10);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_10
      if (reset) begin
        holdData_in_10 <= 16'bx;
      end
      else begin
        holdData_in_10 <= rawData_in_10;
      end
    end

  // Data source for in_11
  initial
    begin : in_11_fileread
      fp_in_11 = $fopen("in_11.dat", "r");
      status_in_11 = $rewind(fp_in_11);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_11 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_11 = $fscanf(fp_in_11, "%h", rawData_in_11);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_11
      if (reset) begin
        holdData_in_11 <= 16'bx;
      end
      else begin
        holdData_in_11 <= rawData_in_11;
      end
    end

  // Data source for in_12
  initial
    begin : in_12_fileread
      fp_in_12 = $fopen("in_12.dat", "r");
      status_in_12 = $rewind(fp_in_12);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_12 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_12 = $fscanf(fp_in_12, "%h", rawData_in_12);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_12
      if (reset) begin
        holdData_in_12 <= 16'bx;
      end
      else begin
        holdData_in_12 <= rawData_in_12;
      end
    end

  // Data source for in_13
  initial
    begin : in_13_fileread
      fp_in_13 = $fopen("in_13.dat", "r");
      status_in_13 = $rewind(fp_in_13);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_13 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_13 = $fscanf(fp_in_13, "%h", rawData_in_13);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_13
      if (reset) begin
        holdData_in_13 <= 16'bx;
      end
      else begin
        holdData_in_13 <= rawData_in_13;
      end
    end

  // Data source for in_14
  initial
    begin : in_14_fileread
      fp_in_14 = $fopen("in_14.dat", "r");
      status_in_14 = $rewind(fp_in_14);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_14 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_14 = $fscanf(fp_in_14, "%h", rawData_in_14);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_14
      if (reset) begin
        holdData_in_14 <= 16'bx;
      end
      else begin
        holdData_in_14 <= rawData_in_14;
      end
    end

  // Data source for in_15
  initial
    begin : in_15_fileread
      fp_in_15 = $fopen("in_15.dat", "r");
      status_in_15 = $rewind(fp_in_15);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_15 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_15 = $fscanf(fp_in_15, "%h", rawData_in_15);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_15
      if (reset) begin
        holdData_in_15 <= 16'bx;
      end
      else begin
        holdData_in_15 <= rawData_in_15;
      end
    end

  // Data source for in_16
  initial
    begin : in_16_fileread
      fp_in_16 = $fopen("in_16.dat", "r");
      status_in_16 = $rewind(fp_in_16);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_16 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_16 = $fscanf(fp_in_16, "%h", rawData_in_16);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_16
      if (reset) begin
        holdData_in_16 <= 16'bx;
      end
      else begin
        holdData_in_16 <= rawData_in_16;
      end
    end

  // Data source for in_17
  initial
    begin : in_17_fileread
      fp_in_17 = $fopen("in_17.dat", "r");
      status_in_17 = $rewind(fp_in_17);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_17 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_17 = $fscanf(fp_in_17, "%h", rawData_in_17);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_17
      if (reset) begin
        holdData_in_17 <= 16'bx;
      end
      else begin
        holdData_in_17 <= rawData_in_17;
      end
    end

  // Data source for in_18
  initial
    begin : in_18_fileread
      fp_in_18 = $fopen("in_18.dat", "r");
      status_in_18 = $rewind(fp_in_18);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_18 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_18 = $fscanf(fp_in_18, "%h", rawData_in_18);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_18
      if (reset) begin
        holdData_in_18 <= 16'bx;
      end
      else begin
        holdData_in_18 <= rawData_in_18;
      end
    end

  // Data source for in_19
  initial
    begin : in_19_fileread
      fp_in_19 = $fopen("in_19.dat", "r");
      status_in_19 = $rewind(fp_in_19);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_19 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_19 = $fscanf(fp_in_19, "%h", rawData_in_19);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_19
      if (reset) begin
        holdData_in_19 <= 16'bx;
      end
      else begin
        holdData_in_19 <= rawData_in_19;
      end
    end

  // Data source for in_20
  initial
    begin : in_20_fileread
      fp_in_20 = $fopen("in_20.dat", "r");
      status_in_20 = $rewind(fp_in_20);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_20 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_20 = $fscanf(fp_in_20, "%h", rawData_in_20);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_20
      if (reset) begin
        holdData_in_20 <= 16'bx;
      end
      else begin
        holdData_in_20 <= rawData_in_20;
      end
    end

  // Data source for in_21
  initial
    begin : in_21_fileread
      fp_in_21 = $fopen("in_21.dat", "r");
      status_in_21 = $rewind(fp_in_21);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_21 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_21 = $fscanf(fp_in_21, "%h", rawData_in_21);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_21
      if (reset) begin
        holdData_in_21 <= 16'bx;
      end
      else begin
        holdData_in_21 <= rawData_in_21;
      end
    end

  // Data source for in_22
  initial
    begin : in_22_fileread
      fp_in_22 = $fopen("in_22.dat", "r");
      status_in_22 = $rewind(fp_in_22);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_22 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_22 = $fscanf(fp_in_22, "%h", rawData_in_22);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_22
      if (reset) begin
        holdData_in_22 <= 16'bx;
      end
      else begin
        holdData_in_22 <= rawData_in_22;
      end
    end

  // Data source for in_23
  initial
    begin : in_23_fileread
      fp_in_23 = $fopen("in_23.dat", "r");
      status_in_23 = $rewind(fp_in_23);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_23 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_23 = $fscanf(fp_in_23, "%h", rawData_in_23);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_23
      if (reset) begin
        holdData_in_23 <= 16'bx;
      end
      else begin
        holdData_in_23 <= rawData_in_23;
      end
    end

  // Data source for in_24
  initial
    begin : in_24_fileread
      fp_in_24 = $fopen("in_24.dat", "r");
      status_in_24 = $rewind(fp_in_24);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_24 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_24 = $fscanf(fp_in_24, "%h", rawData_in_24);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_24
      if (reset) begin
        holdData_in_24 <= 16'bx;
      end
      else begin
        holdData_in_24 <= rawData_in_24;
      end
    end

  // Data source for in_25
  initial
    begin : in_25_fileread
      fp_in_25 = $fopen("in_25.dat", "r");
      status_in_25 = $rewind(fp_in_25);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_25 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_25 = $fscanf(fp_in_25, "%h", rawData_in_25);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_25
      if (reset) begin
        holdData_in_25 <= 16'bx;
      end
      else begin
        holdData_in_25 <= rawData_in_25;
      end
    end

  // Data source for in_26
  initial
    begin : in_26_fileread
      fp_in_26 = $fopen("in_26.dat", "r");
      status_in_26 = $rewind(fp_in_26);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_26 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_26 = $fscanf(fp_in_26, "%h", rawData_in_26);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_26
      if (reset) begin
        holdData_in_26 <= 16'bx;
      end
      else begin
        holdData_in_26 <= rawData_in_26;
      end
    end

  // Data source for in_27
  initial
    begin : in_27_fileread
      fp_in_27 = $fopen("in_27.dat", "r");
      status_in_27 = $rewind(fp_in_27);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_27 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_27 = $fscanf(fp_in_27, "%h", rawData_in_27);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_27
      if (reset) begin
        holdData_in_27 <= 16'bx;
      end
      else begin
        holdData_in_27 <= rawData_in_27;
      end
    end

  // Data source for in_28
  initial
    begin : in_28_fileread
      fp_in_28 = $fopen("in_28.dat", "r");
      status_in_28 = $rewind(fp_in_28);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_28 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_28 = $fscanf(fp_in_28, "%h", rawData_in_28);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_28
      if (reset) begin
        holdData_in_28 <= 16'bx;
      end
      else begin
        holdData_in_28 <= rawData_in_28;
      end
    end

  // Data source for in_29
  initial
    begin : in_29_fileread
      fp_in_29 = $fopen("in_29.dat", "r");
      status_in_29 = $rewind(fp_in_29);
    end

  always @(in_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_in_29 <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_in_29 = $fscanf(fp_in_29, "%h", rawData_in_29);
      end
    end

  // holdData reg for in
  always @(posedge clk or posedge reset)
    begin : stimuli_in_29
      if (reset) begin
        holdData_in_29 <= 16'bx;
      end
      else begin
        holdData_in_29 <= rawData_in_29;
      end
    end

  always @(rawData_in_0 or rdEnb)
    begin : stimuli_in_30
      if (rdEnb == 1'b0) begin
        in_0_offset <= holdData_in_0;
      end
      else begin
        in_0_offset <= rawData_in_0;
      end
    end

  assign #2 in_0 = in_0_offset;

  always @(rawData_in_1 or rdEnb)
    begin : stimuli_in_31
      if (rdEnb == 1'b0) begin
        in_1_offset <= holdData_in_1;
      end
      else begin
        in_1_offset <= rawData_in_1;
      end
    end

  assign #2 in_1 = in_1_offset;

  always @(rawData_in_2 or rdEnb)
    begin : stimuli_in_32
      if (rdEnb == 1'b0) begin
        in_2_offset <= holdData_in_2;
      end
      else begin
        in_2_offset <= rawData_in_2;
      end
    end

  assign #2 in_2 = in_2_offset;

  always @(rawData_in_3 or rdEnb)
    begin : stimuli_in_33
      if (rdEnb == 1'b0) begin
        in_3_offset <= holdData_in_3;
      end
      else begin
        in_3_offset <= rawData_in_3;
      end
    end

  assign #2 in_3 = in_3_offset;

  always @(rawData_in_4 or rdEnb)
    begin : stimuli_in_34
      if (rdEnb == 1'b0) begin
        in_4_offset <= holdData_in_4;
      end
      else begin
        in_4_offset <= rawData_in_4;
      end
    end

  assign #2 in_4 = in_4_offset;

  always @(rawData_in_5 or rdEnb)
    begin : stimuli_in_35
      if (rdEnb == 1'b0) begin
        in_5_offset <= holdData_in_5;
      end
      else begin
        in_5_offset <= rawData_in_5;
      end
    end

  assign #2 in_5 = in_5_offset;

  always @(rawData_in_6 or rdEnb)
    begin : stimuli_in_36
      if (rdEnb == 1'b0) begin
        in_6_offset <= holdData_in_6;
      end
      else begin
        in_6_offset <= rawData_in_6;
      end
    end

  assign #2 in_6 = in_6_offset;

  always @(rawData_in_7 or rdEnb)
    begin : stimuli_in_37
      if (rdEnb == 1'b0) begin
        in_7_offset <= holdData_in_7;
      end
      else begin
        in_7_offset <= rawData_in_7;
      end
    end

  assign #2 in_7 = in_7_offset;

  always @(rawData_in_8 or rdEnb)
    begin : stimuli_in_38
      if (rdEnb == 1'b0) begin
        in_8_offset <= holdData_in_8;
      end
      else begin
        in_8_offset <= rawData_in_8;
      end
    end

  assign #2 in_8 = in_8_offset;

  always @(rawData_in_9 or rdEnb)
    begin : stimuli_in_39
      if (rdEnb == 1'b0) begin
        in_9_offset <= holdData_in_9;
      end
      else begin
        in_9_offset <= rawData_in_9;
      end
    end

  assign #2 in_9 = in_9_offset;

  always @(rawData_in_10 or rdEnb)
    begin : stimuli_in_40
      if (rdEnb == 1'b0) begin
        in_10_offset <= holdData_in_10;
      end
      else begin
        in_10_offset <= rawData_in_10;
      end
    end

  assign #2 in_10 = in_10_offset;

  always @(rawData_in_11 or rdEnb)
    begin : stimuli_in_41
      if (rdEnb == 1'b0) begin
        in_11_offset <= holdData_in_11;
      end
      else begin
        in_11_offset <= rawData_in_11;
      end
    end

  assign #2 in_11 = in_11_offset;

  always @(rawData_in_12 or rdEnb)
    begin : stimuli_in_42
      if (rdEnb == 1'b0) begin
        in_12_offset <= holdData_in_12;
      end
      else begin
        in_12_offset <= rawData_in_12;
      end
    end

  assign #2 in_12 = in_12_offset;

  always @(rawData_in_13 or rdEnb)
    begin : stimuli_in_43
      if (rdEnb == 1'b0) begin
        in_13_offset <= holdData_in_13;
      end
      else begin
        in_13_offset <= rawData_in_13;
      end
    end

  assign #2 in_13 = in_13_offset;

  always @(rawData_in_14 or rdEnb)
    begin : stimuli_in_44
      if (rdEnb == 1'b0) begin
        in_14_offset <= holdData_in_14;
      end
      else begin
        in_14_offset <= rawData_in_14;
      end
    end

  assign #2 in_14 = in_14_offset;

  always @(rawData_in_15 or rdEnb)
    begin : stimuli_in_45
      if (rdEnb == 1'b0) begin
        in_15_offset <= holdData_in_15;
      end
      else begin
        in_15_offset <= rawData_in_15;
      end
    end

  assign #2 in_15 = in_15_offset;

  always @(rawData_in_16 or rdEnb)
    begin : stimuli_in_46
      if (rdEnb == 1'b0) begin
        in_16_offset <= holdData_in_16;
      end
      else begin
        in_16_offset <= rawData_in_16;
      end
    end

  assign #2 in_16 = in_16_offset;

  always @(rawData_in_17 or rdEnb)
    begin : stimuli_in_47
      if (rdEnb == 1'b0) begin
        in_17_offset <= holdData_in_17;
      end
      else begin
        in_17_offset <= rawData_in_17;
      end
    end

  assign #2 in_17 = in_17_offset;

  always @(rawData_in_18 or rdEnb)
    begin : stimuli_in_48
      if (rdEnb == 1'b0) begin
        in_18_offset <= holdData_in_18;
      end
      else begin
        in_18_offset <= rawData_in_18;
      end
    end

  assign #2 in_18 = in_18_offset;

  always @(rawData_in_19 or rdEnb)
    begin : stimuli_in_49
      if (rdEnb == 1'b0) begin
        in_19_offset <= holdData_in_19;
      end
      else begin
        in_19_offset <= rawData_in_19;
      end
    end

  assign #2 in_19 = in_19_offset;

  always @(rawData_in_20 or rdEnb)
    begin : stimuli_in_50
      if (rdEnb == 1'b0) begin
        in_20_offset <= holdData_in_20;
      end
      else begin
        in_20_offset <= rawData_in_20;
      end
    end

  assign #2 in_20 = in_20_offset;

  always @(rawData_in_21 or rdEnb)
    begin : stimuli_in_51
      if (rdEnb == 1'b0) begin
        in_21_offset <= holdData_in_21;
      end
      else begin
        in_21_offset <= rawData_in_21;
      end
    end

  assign #2 in_21 = in_21_offset;

  always @(rawData_in_22 or rdEnb)
    begin : stimuli_in_52
      if (rdEnb == 1'b0) begin
        in_22_offset <= holdData_in_22;
      end
      else begin
        in_22_offset <= rawData_in_22;
      end
    end

  assign #2 in_22 = in_22_offset;

  always @(rawData_in_23 or rdEnb)
    begin : stimuli_in_53
      if (rdEnb == 1'b0) begin
        in_23_offset <= holdData_in_23;
      end
      else begin
        in_23_offset <= rawData_in_23;
      end
    end

  assign #2 in_23 = in_23_offset;

  always @(rawData_in_24 or rdEnb)
    begin : stimuli_in_54
      if (rdEnb == 1'b0) begin
        in_24_offset <= holdData_in_24;
      end
      else begin
        in_24_offset <= rawData_in_24;
      end
    end

  assign #2 in_24 = in_24_offset;

  always @(rawData_in_25 or rdEnb)
    begin : stimuli_in_55
      if (rdEnb == 1'b0) begin
        in_25_offset <= holdData_in_25;
      end
      else begin
        in_25_offset <= rawData_in_25;
      end
    end

  assign #2 in_25 = in_25_offset;

  always @(rawData_in_26 or rdEnb)
    begin : stimuli_in_56
      if (rdEnb == 1'b0) begin
        in_26_offset <= holdData_in_26;
      end
      else begin
        in_26_offset <= rawData_in_26;
      end
    end

  assign #2 in_26 = in_26_offset;

  always @(rawData_in_27 or rdEnb)
    begin : stimuli_in_57
      if (rdEnb == 1'b0) begin
        in_27_offset <= holdData_in_27;
      end
      else begin
        in_27_offset <= rawData_in_27;
      end
    end

  assign #2 in_27 = in_27_offset;

  always @(rawData_in_28 or rdEnb)
    begin : stimuli_in_58
      if (rdEnb == 1'b0) begin
        in_28_offset <= holdData_in_28;
      end
      else begin
        in_28_offset <= rawData_in_28;
      end
    end

  assign #2 in_28 = in_28_offset;

  always @(rawData_in_29 or rdEnb)
    begin : stimuli_in_59
      if (rdEnb == 1'b0) begin
        in_29_offset <= holdData_in_29;
      end
      else begin
        in_29_offset <= rawData_in_29;
      end
    end

  assign #2 in_29 = in_29_offset;

  modelo_base_fixpt u_modelo_base_fixpt (.in_0(in_0),  // ufix16_En15
                                         .in_1(in_1),  // ufix16_En15
                                         .in_2(in_2),  // ufix16_En15
                                         .in_3(in_3),  // ufix16_En15
                                         .in_4(in_4),  // ufix16_En15
                                         .in_5(in_5),  // ufix16_En15
                                         .in_6(in_6),  // ufix16_En15
                                         .in_7(in_7),  // ufix16_En15
                                         .in_8(in_8),  // ufix16_En15
                                         .in_9(in_9),  // ufix16_En15
                                         .in_10(in_10),  // ufix16_En15
                                         .in_11(in_11),  // ufix16_En15
                                         .in_12(in_12),  // ufix16_En15
                                         .in_13(in_13),  // ufix16_En15
                                         .in_14(in_14),  // ufix16_En15
                                         .in_15(in_15),  // ufix16_En15
                                         .in_16(in_16),  // ufix16_En15
                                         .in_17(in_17),  // ufix16_En15
                                         .in_18(in_18),  // ufix16_En15
                                         .in_19(in_19),  // ufix16_En15
                                         .in_20(in_20),  // ufix16_En15
                                         .in_21(in_21),  // ufix16_En15
                                         .in_22(in_22),  // ufix16_En15
                                         .in_23(in_23),  // ufix16_En15
                                         .in_24(in_24),  // ufix16_En15
                                         .in_25(in_25),  // ufix16_En15
                                         .in_26(in_26),  // ufix16_En15
                                         .in_27(in_27),  // ufix16_En15
                                         .in_28(in_28),  // ufix16_En15
                                         .in_29(in_29),  // ufix16_En15
                                         .out(out_1)  // ufix1
                                         );

  assign #1 out_addr_delay_1 = out_addr;

  // Data source for out_expected
  initial
    begin : out_expected_fileread
      fp_out_expected = $fopen("out_expected.dat", "r");
      status_out_expected = $rewind(fp_out_expected);
    end

  always @(out_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        out_expected <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_out_expected = $fscanf(fp_out_expected, "%h", out_expected);
      end
    end

  assign out_ref = out_expected;

  always @(posedge clk or posedge reset)
    begin : out_1_checker
      if (reset == 1'b1) begin
        out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && out_1 !== out_ref) begin
          out_testFailure <= 1'b1;
          $display("ERROR in out_1 at time %t : Expected '%h' Actual '%h'", $time, out_ref, out_1);
        end
      end
    end

  assign testFailure = out_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // modelo_base_fixpt_tb

