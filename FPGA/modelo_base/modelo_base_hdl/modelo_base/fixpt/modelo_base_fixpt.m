%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 9.13 and Fixed-Point Designer 7.5           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function out  = modelo_base_fixpt(in)
    % DefiniciÃ³n de Pesos y Biases
    fm = get_fimath();

    w1 = fi([0.3416577,-0.19762318,0.16598596,0.13318215,0.1162674,0.07249487,-0.12066017,0.31635892,0.3977392,-0.02595372,-0.18558253,0.28164598,-0.04757007,0.23131901,0.19627589,-0.10330349;
        0.24525744,-0.15210968,0.023785619,0.021897532,0.2553408,0.10419767,0.17261516,-0.14824674,-0.3526036,0.15311165,0.05785516,0.076498345,0.35409126,0.058753047,0.059024863,0.18221596;
        0.028597152,-0.22727616,0.13980795,-0.06473144,-0.119667314,0.25484636,-0.118271425,-0.25857985,0.06237007,0.04916609,0.18184283,-0.07094956,-0.26818612,-0.038447823,0.054975756,-0.07673672;
        -0.2979656,0.41376832,-0.04120276,0.30276644,-0.22838926,-0.33182722,-0.2980643,-0.2791138,0.118476406,0.09382918,0.03338495,0.34227696,0.54245853,-0.15067813,0.045400225,-0.3314905;
        0.15089875,-0.17389809,-0.21688177,0.13801724,-0.004029397,-0.06145206,0.42966294,0.17490107,-0.1466518,-0.14979333,-0.16536632,0.16870734,-0.09990669,-0.18229324,0.21523076,-0.3794041;
        0.08715189,-0.004179281,0.07648651,0.34439802,0.168956,-0.10840479,-0.1050965,-0.014914665,0.07223115,0.1631782,-0.049420148,0.4324807,0.19019367,0.22261366,-0.43717262,-0.13681851;
        -0.5250874,0.28465864,-0.47111118,0.115276344,-0.120812155,-0.4683998,-0.3011621,-0.08535403,-0.25181496,0.041292567,-0.103726864,0.7033703,0.29537988,0.313858,-0.30513358,-0.18920104;
        -0.66675925,0.10663173,0.03085017,0.35471287,-0.07526603,-0.51860374,-0.36998773,-0.44484603,-0.41828462,0.30633652,-0.14172469,0.2746687,0.15938684,-0.07873581,-0.0902727,0.14288707;
        0.27428785,0.25957963,-0.15404187,-0.015020868,0.012224952,-0.047396168,-0.13085048,0.08474409,0.027644007,-0.037527617,-0.24659583,-0.041038197,-0.18961662,-0.35630476,0.43823323,-0.015472406;
        0.4543254,0.15072326,0.0524317,-0.4933701,0.034965713,0.4887522,0.19626264,0.4587336,0.50647974,-0.13761126,0.020912826,-0.46303082,-0.49912953,-0.047697496,0.3433781,0.14418961;
        -0.19963238,-0.10733507,-0.058542747,0.25792792,-0.18548022,-0.16706425,-0.165557,-0.29182917,-0.40880588,0.63870406,-0.26499856,0.66646224,0.6863424,-0.397504,-0.5374789,0.05940113;
        0.170408,-0.09293042,-0.06502084,0.10237561,0.37174058,-0.054567754,0.12855557,0.30239528,-0.0113045,0.10042396,-0.16625097,0.026584085,0.043566804,-0.32029206,0.01023118,-0.07630174;
        -0.19161524,-0.10893104,0.053520314,0.041870575,-0.48172647,-0.10200333,-0.19909765,-0.01937618,-0.4424372,0.5194821,-0.16489825,0.45683584,0.31790018,-0.1672562,-0.47195283,-0.21711373;
        -0.23535806,0.32187775,-0.41168797,0.5184363,-0.15860817,-0.036229018,-0.5797234,-0.27616754,-0.22391792,0.60530347,0.19852927,0.73101026,0.38805342,-0.4035105,-0.55488706,0.18599112;
        0.07686308,-0.005022385,0.09183563,-0.26114386,0.30930558,0.25397363,0.42106447,0.2611793,0.17134745,0.034362357,-0.21182379,-0.21262717,-0.42463508,-0.29586026,-0.12294957,0.1601961;
        -0.062370524,-0.13608393,-0.29269716,0.102436885,-0.10393853,0.36436245,-0.052857026,0.05434617,-0.18988359,-0.21106745,0.15974596,-0.30280092,-0.32802662,0.3646712,0.34931812,0.29438335;
        0.20587486,-0.055560015,-0.28107855,0.14990248,0.13005649,0.11767846,0.10154834,0.011618874,0.21196637,-0.30565158,-0.16122527,-0.03170356,0.14971742,0.022767998,-0.010932089,-0.1049291;
        -0.024830606,-0.1856538,0.2488457,-0.051962364,-0.05040501,0.18052605,0.43754995,0.21568146,0.18642418,-0.17541969,0.032905072,-0.28016517,0.3913258,0.25307417,0.049449347,-0.032721475;
        0.55922794,0.1304012,-0.042941235,-0.32323146,0.41842756,0.20786597,-0.07101474,0.4567974,0.28679615,-0.1049582,-0.18737872,-0.25390086,0.08310928,-0.29224408,0.16025087,0.17943412;
        0.06680149,0.04392566,0.38464966,-0.074295945,0.33355027,-0.0657931,0.24832079,0.25818428,0.4941305,-0.106005095,0.11133954,-0.24151397,-0.25526428,0.32186532,0.048791677,0.077439815;
        -0.03494037,0.09338773,0.16197869,-0.066030316,-0.3808486,-0.09422706,-0.24261676,-0.15542814,-0.18360528,0.3454266,-0.2008725,0.48894927,0.19659312,-0.022615269,-0.06922043,-0.035934884;
        0.12336013,0.30753842,0.1315009,0.18251154,0.10664111,0.13853163,-0.23046266,0.038611386,-0.4587424,-0.040788114,-0.2163159,0.4139685,0.25636593,-0.055419818,-0.26867503,-0.15471365;
        -0.41890335,0.31168675,-0.37841222,0.327986,-0.2523307,-0.18243696,0.02143296,-0.33267805,-0.25270936,0.4582311,0.2755063,-0.05066061,0.18744807,0.30872062,-0.1487741,-0.31873217;
        -0.137304,0.16410667,-0.20510957,0.54767126,0.01234122,0.00389819,-0.16604976,-0.27621296,0.14326061,0.32319254,-0.1747131,0.44305757,0.4311673,0.22735089,-0.47738996,0.003412815;
        0.3830565,-0.16828081,0.13596,0.12464079,0.11912348,0.032553423,-0.20649536,0.2139105,-0.11384121,-0.025773974,-0.07476875,-0.002451351,0.08162381,-0.3584603,0.1592011,-0.19661486;
        -0.40817457,0.09594586,0.07060346,0.42969152,-0.46516642,-0.4677452,0.11665916,-0.19285367,-0.17221534,0.55799866,-0.13955507,0.16823556,0.053094577,0.11612353,0.022085976,0.14254312;
        -0.51231813,0.25260603,-0.26785368,0.6404036,-0.22501625,-0.18088765,0.07260224,0.04467788,0.14298058,0.28355184,0.25556472,0.56282985,0.65844494,0.17078146,-0.17100574,0.22041039;
        -0.6352969,0.09388588,0.10736807,0.1296583,-0.5018738,-0.333329,0.010829085,-0.4574329,-0.06348069,0.15399763,-0.099757075,0.5529832,0.104661256,-0.18570194,-0.28728384,-0.34333193;
        0.17729971,0.54822654,-0.1085743,0.300526,0.17137466,0.3429861,-0.25534904,0.036784545,-0.2003634,0.33523196,0.3279846,-0.09860651,0.37973762,0.06130161,-0.20279017,-0.071630985;
        0.0229376,0.16618049,0.046369035,-0.14738923,0.0681954,-0.21467952,0.2219951,-0.05379134,0.20795523,0.3059943,-0.17033726,0.099493735,0.3714365,0.35913277,-0.11667134,0.028386606], 1, 16, 15, fm);

    b1 = fi([0.49919435;
        -0.21352378;
        0.29201192;
        -0.39558712;
        0.36533004;
        0.47260627;
        0.4541752;
        0.40724716;
        0.5172145;
        -0.4035319;
        0;
        -0.43968183;
        -0.40893316;
        0.03575024;
        0.47975338;
        -0.04793478], 1, 16, 15, fm);

    w2 = fi([-0.5127151;
        0.71975446;
        -0.23979533;
        0.9597124;
        -0.9991499;
        -1.1801795;
        -0.9880482;
        -0.68268657;
        -1.2658143;
        0.80682206;
        0.5380038;
        0.5641037;
        1.0264457;
        -0.26244563;
        -0.65682584;
        0.15915324], 1, 16, 14, fm);

    b2 = fi(-0.319013, 1, 16, 16, fm);

    % Capa oculta

    mid_res = fi(zeros(16,1), 0, 16, 14, fm);
    for i = 1:16
        mid_res(i) = neurona_mid(in, w1(:,i), b1(i));
    end
    
    % Capa de salida

    salida_neurona = fi(neurona_out(mid_res, w2, b2), 0, 16, 16, fm);

    if salida_neurona >= fi(0.5, 0, 16, 16, fm)
        out = fi(1, 0, 1, 0, fm);
    else
        out = fi(0, 0, 1, 0, fm);
    end
end

function [y] = neurona_mid(x, w, b)
    fm = get_fimath();

    acum = fi(0, 1, 16, 13, fm);
    for i = 1:30
        acum(:) = acum + x(i)*w(i);
    end
    acum(:) = acum + b;
    if acum < fi(0, 0, 1, 0, fm)
        y = fi(0, 0, 16, 14, fm);
    else
        y = fi(acum, 0, 16, 14, fm);
    end
end

function [y] = neurona_out(x, w, b)
    fm = get_fimath();

    acum = fi(0, 1, 16, 12, fm);
    for i = 1:16
        acum(:) = acum + x(i)*w(i);
    end
    acum(:) = acum + b;

    y = fi(fi_div(fi(0.5, 0, 16, 16, fm)*acum, (fi(1, 0, 1, 0, fm)+abs(acum)))+fi(0.5, 0, 16, 16, fm), 0, 16, 16, fm);
%     y = sigmoide(acum);
    % y = 0.4*tanh(acum) + 0.5;
end



function ntype = divideType(a,b)
    coder.inline( 'always' );
    nt1 = numerictype( a );
    nt2 = numerictype( b );
    maxFL = max( [ min( nt1.WordLength, nt1.FractionLength ), min( nt2.WordLength, nt2.FractionLength ) ] );
    FL = max( maxFL, 24 );
    extraBits = (FL - maxFL);
    WL = nt1.WordLength + nt2.WordLength;
    WL = min( WL, 124 );
    if (WL + extraBits)<64
        ntype = numerictype( nt1.Signed || nt2.Signed, WL + extraBits, FL );
    else
        ntype = numerictype( nt1.Signed || nt2.Signed, WL, FL );
    end
end


function c = fi_div(a,b)
    coder.inline( 'always' );
    a1 = fi( a, 'RoundMode', 'fix' );
    b1 = fi( b, 'RoundMode', 'fix' );
    nType = divideType( a1, b1 );
    if isfi( a ) && isfi( b ) && isscalar( b )
        c1 = divide( nType, a1, b1 );
        c = fi( c1, numerictype( c1 ), fimath( a ) );
    else
        c = fi( a / b, nType );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
